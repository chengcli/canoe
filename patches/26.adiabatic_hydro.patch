diff --git a/src/eos/adiabatic_hydro.cpp b/src/eos/adiabatic_hydro.cpp
index e61ff205..c0e9d960 100644
--- a/src/eos/adiabatic_hydro.cpp
+++ b/src/eos/adiabatic_hydro.cpp
@@ -20,6 +20,10 @@
 #include "../parameter_input.hpp"
 #include "eos.hpp"
 
+#include <configure.hpp>
+#include <impl.hpp>
+#include <exo3/cubed_sphere.hpp>
+
 // EquationOfState constructor
 
 EquationOfState::EquationOfState(MeshBlock *pmb, ParameterInput *pin) :
@@ -67,7 +71,11 @@ void EquationOfState::ConservedToPrimitive(
         w_vy = u_m2*di;
         w_vz = u_m3*di;
 
-        Real e_k = 0.5*di*(SQR(u_m1) + SQR(u_m2) + SQR(u_m3));
+#ifdef CUBED_SPHERE
+        cs::CovariantToContravariant(prim.at(k, j, i),
+            static_cast<GnomonicEquiangle *>(pco)->GetCosineCell(k, j));
+#endif
+        Real e_k = 0.5 * (u_m1 * w_vx + u_m2 * w_vy + u_m3 * w_vz);
         w_p = gm1*(u_e - e_k);
 
         // apply pressure floor, correct total energy
@@ -107,11 +115,18 @@ void EquationOfState::PrimitiveToConserved(
         const Real& w_vz = prim(IVZ,k,j,i);
         const Real& w_p  = prim(IPR,k,j,i);
 
-        u_d = w_d;
         u_m1 = w_vx*w_d;
         u_m2 = w_vy*w_d;
         u_m3 = w_vz*w_d;
-        u_e = w_p*igm1 + 0.5*w_d*(SQR(w_vx) + SQR(w_vy) + SQR(w_vz));
+
+#ifdef CUBED_SPHERE
+        cs::ContravariantToCovariant(cons.at(k, j, i),
+            static_cast<GnomonicEquiangle *>(pco)->GetCosineCell(k, j));
+#endif
+
+        // total energy
+        u_e = w_p*igm1 + 0.5 * (u_m1 * w_vx + u_m2 * w_vy + u_m3 * w_vz);
+        u_d = w_d;
       }
     }
   }
