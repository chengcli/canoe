diff --git a/src/hydro/calculate_fluxes.cpp b/src/hydro/calculate_fluxes.cpp
index eeaf381b..76737a81 100644
--- a/src/hydro/calculate_fluxes.cpp
+++ b/src/hydro/calculate_fluxes.cpp
@@ -24,6 +24,13 @@
 #include "hydro.hpp"
 #include "hydro_diffusion/hydro_diffusion.hpp"
 
+// snap injection
+#include <impl.hpp>
+#include <snap/decomposition/decomposition.hpp>
+#include <configure.hpp>
+#include <exo3/cubed_sphere.hpp>
+#include <checks.hpp>
+
 // OpenMP header
 #ifdef OPENMP_PARALLEL
 #include <omp.h>
@@ -74,9 +81,15 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
     }
   }
 
+  // decompose pressure to pertubation pressure and hydrostatic pressure
+  pmb->pimpl->pdec->ChangeToEntropy(w, kl, ku, jl, ju);
+
   for (int k=kl; k<=ku; ++k) {
     for (int j=jl; j<=ju; ++j) {
       // reconstruct L/R states
+#ifdef CUBED_SPHERE
+      pmb->precon->Weno5X1(k, j, is-1, ie+1, w, bcc, wl_, wr_);
+#else
       if (order == 1) {
         pmb->precon->DonorCellX1(k, j, is-1, ie+1, w, bcc, wl_, wr_);
       } else if (order == 2) {
@@ -88,6 +101,13 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
       } else {
         pmb->precon->PiecewiseParabolicX1(k, j, is-1, ie+1, w, bcc, wl_, wr_);
       }
+#endif
+
+      // assemble pressure pertubation
+      pmb->pimpl->pdec->RestoreFromEntropy(w, wl_, wr_, k, j, is, ie + 1);
+
+      fix_reconstruct_x1(pmb, wl_, wr_, w, k, j, is, ie + 1);
+      check_reconstruct(wl_, wr_, X1DIR, k, j, is, ie + 1);
 
       pmb->pcoord->CenterWidth1(k, j, is, ie+1, dxw_);
 #if !MAGNETIC_FIELDS_ENABLED  // Hydro:
@@ -167,6 +187,10 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
   //--------------------------------------------------------------------------------------
   // j-direction
 
+#ifdef CUBED_SPHERE
+  auto pexo3 = pmb->pimpl->pexo3;
+#endif  // CUBED_SPHERE
+
   if (pmb->pmy_mesh->f2) {
     AthenaArray<Real> &x2flux = flux[X2DIR];
     // set the loop limits
@@ -191,6 +215,7 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
       } else {
         pmb->precon->PiecewiseParabolicX2(k, js-1, il, iu, w, bcc, wl_, wr_);
       }
+
       for (int j=js; j<=je+1; ++j) {
         // reconstruct L/R states at j
         if (order == 1) {
@@ -205,7 +230,15 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
           pmb->precon->PiecewiseParabolicX2(k, j, il, iu, w, bcc, wlb_, wr_);
         }
 
+        fix_reconstruct_x2(wl_, wr_, w, k, j, il, iu);
+        check_reconstruct(wl_, wr_, X2DIR, k, j, il, iu);
+
         pmb->pcoord->CenterWidth2(k, j, il, iu, dxw_);
+
+#ifdef CUBED_SPHERE // Rieman solver run later
+        pexo3->SaveLR3DValues(wl_, wr_, X2DIR, k, j, il, iu); // il to iu is what the RiemannSolver below uses...
+#else // NOT_CUBED_SPHERE
+
 #if !MAGNETIC_FIELDS_ENABLED  // Hydro:
         RiemannSolver(k, j, il, iu, IVY, wl_, wr_, x2flux, dxw_);
 #else  // MHD:
@@ -222,6 +255,7 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
             }
           }
         }
+#endif // CUBED_SPHERE
 
         // swap the arrays for the next step
         wl_.SwapAthenaArray(wlb_);
@@ -292,6 +326,11 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
       il = is-1, iu = ie+1, jl = js-1, ju = je+1;
     }
 
+#ifdef CUBED_SPHERE
+    il = is-1;
+    iu = ie+1;
+#endif  // CUBED_SPHERE
+
     for (int j=jl; j<=ju; ++j) { // this loop ordering is intentional
       // reconstruct the first row
       if (order == 1) {
@@ -305,6 +344,7 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
       } else {
         pmb->precon->PiecewiseParabolicX3(ks-1, j, il, iu, w, bcc, wl_, wr_);
       }
+
       for (int k=ks; k<=ke+1; ++k) {
         // reconstruct L/R states at k
         if (order == 1) {
@@ -319,7 +359,15 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
           pmb->precon->PiecewiseParabolicX3(k, j, il, iu, w, bcc, wlb_, wr_);
         }
 
+        fix_reconstruct_x3(wl_, wr_, w, k, j, il, iu);
+        check_reconstruct(wl_, wr_, X3DIR, k, j, il, iu);
+
         pmb->pcoord->CenterWidth3(k, j, il, iu, dxw_);
+
+#ifdef CUBED_SPHERE // Rieman solver run later
+        pexo3->SaveLR3DValues(wl_, wr_, X3DIR, k, j, il, iu); // il to iu is what the RiemannSolver below uses...
+#else // NOT_CUBED_SPHERE
+
 #if !MAGNETIC_FIELDS_ENABLED  // Hydro:
         RiemannSolver(k, j, il, iu, IVZ, wl_, wr_, x3flux, dxw_);
 #else  // MHD:
@@ -335,6 +383,7 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
             }
           }
         }
+#endif // CUBED_SPHERE
 
         // swap the arrays for the next step
         wl_.SwapAthenaArray(wlb_);
@@ -393,6 +442,50 @@ void Hydro::CalculateFluxes(AthenaArray<Real> &w, FaceField &b,
     } // end if (order == 4)
   }
 
+// Cubed Sphere: recover the stored values, run riemann solvers
+#ifdef CUBED_SPHERE
+  // Temporarily comment out the following 2 lines to avoid the error
+  pexo3->SynchronizeFluxesSend();
+  pexo3->SynchronizeFluxesRecv();
+  pexo3->SynchronizeFluxesWait();
+
+  //--------------------------------------------------------------------------------------
+  // j-direction
+
+  if (pmb->pmy_mesh->f2) {
+    AthenaArray<Real> &x2flux = flux[X2DIR];
+    // set the loop limits
+    il = is-1, iu = ie+1, kl = ks, ku = ke;
+
+    for (int k=kl; k<=ku; ++k) {
+      for (int j=js; j<=je+1; ++j) {
+        // reconstruct L/R states at j
+        pmb->pcoord->CenterWidth2(k, j, il, iu, dxw_);
+        pexo3->LoadLR3DValues(wl_, wr_, X2DIR, k, j, il, iu); // il to iu is what the RiemannSolver below uses...
+        RiemannSolver(k, j, il, iu, IVY, wl_, wr_, x2flux, dxw_);
+      }
+    }
+  }
+
+
+  //--------------------------------------------------------------------------------------
+  // k-direction
+
+  if (pmb->pmy_mesh->f3) {
+    AthenaArray<Real> &x3flux = flux[X3DIR];
+    // set the loop limits
+    il = is, iu = ie, jl = js, ju = je;
+
+    for (int j=jl; j<=ju; ++j) { // this loop ordering is intentional
+      for (int k=ks; k<=ke+1; ++k) {
+        pmb->pcoord->CenterWidth3(k, j, il, iu, dxw_);
+        pexo3->LoadLR3DValues(wl_, wr_, X3DIR, k, j, il, iu);
+        RiemannSolver(k, j, il, iu, IVZ, wl_, wr_, x3flux, dxw_);
+      }
+    }
+  }
+#endif  // CUBED_SPHERE
+
   if (!STS_ENABLED)
     AddDiffusionFluxes();
 
