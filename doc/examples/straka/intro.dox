<a name="Intro"></a>
<h1> Introduction </h1>

This example shows the simulation of a sinking air bubble in two dimensions. It
is proposed by @cite straka1993 for benchmarking the
numerical methods. The temperature anomaly of the cold air bubble is described by:

@f{equation*}
  \Delta T = -15\;\text{K} \frac{\cos(\pi L)+1}{2}, \quad L < 1,
@f}

where $L$ is the normalized distance to the center of the cold air bubble at $(x_c,z_c)$.

@f{equation*}
  L = \Big(\big(\frac{x - x_c}{x_r}\big)^2+\big(\frac{z - z_c}{z_r}\big)^2\Big)^{1/2}.
@f}

Particularly, $x_c=0$ km, $z_c=3$ km, $x_r=4$ km and $z_r=2$ km. The domain is
two-dimensional and is 6.4 km tall and 25.6 km wide. Either the horizontal or the
vertical resolution is 100 m. The background atmosphere is isentropic, where the
temperature is 300 K at 1 bar surface pressure. Initially, the bubble is aloft in the air,
hydrostatically balanced. Convective instability causes the bubble to sink while
trigging horizontal and vertical velocity fields. The resulting density current
propagates out at the surface developing
<a href="https://en.wikipedia.org/wiki/Kelvin%E2%80%93Helmholtz_instability">Kelvin-Helmholtz instability</a>.
The purpose of the program is to resolve the instability and calculate the evolution of
the density current.


<h3> Patch the code </h3>
Since this example is the first of the series. We would spend a few paragraphs on how to
configure, compile and run the code. The first step of running the code is to patch the code.
The Canoe model is developed based on
the <a href="https://github.com/PrincetonUniversity/athena/wiki">Athena++ project</a>.
We have modified many source codes and have added support for atmospheric simulation. In order to
keep track of our modifications and keep it seperate from the main stream development of the Athena++
code, all source files that are in conflict with the original Athena++ code
are placed in a dedicated folder @reff{drum}. Then we patch the code using a python script:
@code
./patch.py
@endcode
After this script was executed, a file named `patch_files` will appear containing
replacement files and supplementary files. Then the program will configure according to
the rules specified by the `patch_files`.

<h3> Configure the program </h3>
Next, configure the program using the following command.
@code
  ./configure.py --prob=straka --nghost=3 -netcdf
@endcode
`straka` is the name of the application. Internally, the configure script searches for
file named `straka.cpp` under the directory src/pgen. It is the problem generator file
that will be complied in the next section. `3` is the number of grids in the ghost cells
outside of the computational domain.
A higher order numerical scheme requires a larger number of ghost cells. We are using
the <a href="https://en.wikipedia.org/wiki/WENO_methods">Weighted Essentially Non-Oscillatory
(WENO)</a> method, which requires 3 ghost celss.
Lastly, we enable the <a href="https://en.wikipedia.org/wiki/NetCDF">NetCDF</a>
output by the option `-netcdf`. If successful, a messge will appear saying:
@verbatim
Your Athena++ distribution has now been configured with the following options:
  Problem generator:          straka
  Coordinate system:          cartesian
  X1 Grid ratio:              1.0
  Equation of state:          adiabatic
  Ammonia vapor id:           -1
  Water vapor id:             -1
  Riemann solver:             hllc
  Chemistry:                  chemistry
  Forcing Jacobian:           JacobianGravityCoriolis
  Magnetic fields:            OFF
  Number of vapors:           0
  Number of phases:           1
  Number of scalars:          0
  Special relativity:         OFF
  General relativity:         OFF
  Frame transformations:      OFF
  Self-Gravity:               OFF
  Super-Time-Stepping:        OFF
  Shearing Box BCs:           OFF
  Debug level:                0
  Code coverage flags:        OFF
  Linker flags:               -Lsrc/math -lclimath -lnetcdf
  Floating-point precision:   double
  Number of ghost cells:      3
  MPI parallelism:            OFF
  OpenMP parallelism:         OFF
  FFT:                        OFF
  HDF5 output:                OFF
  NETCDF output:              ON
  PNETCDF output:             OFF
  Compiler:                   g++
  Compilation command:        g++  -O3 -std=c++11
@endverbatim

<h3> Compile the program </h3>
Then we compile the program by:
@code
  make
@endcode
It is possible to speed up the compilation using multiple core available to the
computer. To do it, we use:
@code
  make -j4
@endcode
in which the option `-j4` suggests that using 4 cores to compile the program
simultaneously.
If the compilation is successfull, an executable file named "straka.ex" will appear in
the <i>bin</i> folder.

<h3> Run the program </h3>
Change directory to the running directory
@code
  cd example/2d.straka
@endcode
It is recommended to make a soft link of the executable file to the
running directory:
@code
  ln -s ../../bin/straka.ex ./
@endcode
so that everything can be perfrom under the running directory.
Finally, execute the program by
@code
  ./straka.ex -i straka.inp > log.straka &
@endcode
The `straka.inp` is the input file and the log file for the run is `log.straka`.
The `&` symbol at the end lets the program to run in the background so that you can do
other things. When the program finishes, many `.nc` files will appear. They record the
dynamic fields at specified output frequency in the input file. The next step is to
combine them into a single one. This functionality is provided by the script
`combine.py` located in the root directory.
@code
  ../../combine.py -o test
@endcode
Now you will have a single output named `straka-test-main.nc`. Use the following command to
check out the fields stored in the netcdf file:
@code
  ncdump -h straka-test-main.nc
@endcode
The output is:
@verbatim
netcdf output {
dimensions:
	time = UNLIMITED ; // (4 currently)
	x1 = 64 ;
	x1f = 65 ;
	x2 = 256 ;
	x2f = 257 ;
	x3 = 1 ;
variables:
	float time(time) ;
		time:axis = "T" ;
		time:units = "s" ;
	float x1(x1) ;
		x1:axis = "Z" ;
		x1:units = "m" ;
	float x1f(x1f) ;
	float x2(x2) ;
		x2:axis = "Y" ;
		x2:units = "m" ;
	float x2f(x2f) ;
	float x3(x3) ;
		x3:axis = "X" ;
		x3:units = "m" ;
	float rho(time, x1, x2, x3) ;
		rho:units = "kg/m^3" ;
		rho:long_name = "density" ;
	float press(time, x1, x2, x3) ;
		press:units = "pa" ;
		press:long_name = "pressure" ;
	float vel1(time, x1, x2, x3) ;
		vel1:units = "m/s" ;
		vel1:long_name = "velocity" ;
	float vel2(time, x1, x2, x3) ;
		vel2:units = "m/s" ;
		vel2:long_name = "velocity" ;
	float vel3(time, x1, x2, x3) ;
		vel3:units = "m/s" ;
		vel3:long_name = "velocity" ;
	float temp(time, x1, x2, x3) ;
		temp:units = "K" ;
		temp:long_name = "temperature" ;
	float theta(time, x1, x2, x3) ;
		theta:units = "K" ;
		theta:long_name = "potential temperature" ;
}
@endverbatim
The variables are self-descriptive with units and long name, which is the advantage of
using NetCDF as the output format!
