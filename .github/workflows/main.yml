name: Linux-Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ACCOUNT: chengcli

jobs:
  style-checker:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by ${{runner.name}}"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "🖥️ The workspace, ${{ github.workspace }}, is now ready to test your code on the runner."

      - name: Install cpplint
        run: sudo pip install cpplint

      - uses: actions/checkout@v3

      - name: Run cpplint
        run: ./tools/check_style.sh

  build-non-hydrostatic:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker

    steps:
      - uses: actions/checkout@v3

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j2

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  build-hydrostatic:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-20.04
    needs: style-checker
    steps:
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev

      - uses: actions/checkout@v3

      - name: install python modules
        run: sudo pip install -r requirements.txt

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DHYDROSTATIC=ON -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j2

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  build-vapor2-cloud4:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker

    steps:
      - uses: actions/checkout@v3

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNVAPOR=2 -DNCLOUD=4 -DPLANET=Jupiter

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j2

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  build-vapor2-cloud5:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker

    steps:
      - uses: actions/checkout@v3

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNVAPOR=2 -DNCLOUD=5 -DPLANET=Jupiter

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j2

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  generate-ktable-with-netcdf:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker
    steps:
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev

      - uses: actions/checkout@v3

      - name: install python modules
        run: sudo pip install -r requirements.txt

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DRFM=ON -DNETCDF=ON -DACCOUNT=${{env.ACCOUNT}} -DTOKEN=${{secrets.ACCESS_TOKEN}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/build-netcdf

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build-netcdf --config ${{env.BUILD_TYPE}} -- -j2

      - name: test generating ktable
        working-directory: ${{github.workspace}}/build-netcdf
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: python ./bin/run_ktable.py

      - name: test jupiter heating/cooling
        working-directory: ${{github.workspace}}/build-netcdf
        run: echo "Cheers!"

  straka-2d:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: build-non-hydrostatic
    steps:
      - uses: actions/checkout@v3

      - name: set up git lfs
        run: |
          git lfs install
          git lfs pull

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake nco libnetcdf-dev libpnetcdf-dev

      - name: set up python libraries
        run: pip3 install -r requirements.txt

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTASK=straka

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j4

      - name: run simulation
        run: cd ${{github.workspace}}/build/bin && ./straka.release -i straka.inp

      - name: combile outputs
        run: cd ${{github.workspace}}/build/bin && ./combine.py -o test

      - name: compare result
        run: >
          python3 ${{github.workspace}}/examples/2019-Li-snap/test_straka.py
          ${{github.workspace}}/build/bin/straka-test-main.nc
          ${{github.workspace}}/examples/2019-Li-snap/straka_output.nc

  robert-2d:
    if: github.event.pull_request.draft == false
    runs-on: [self-hosted, Linux, 8core]
    needs: build-non-hydrostatic
    steps:
      - uses: actions/checkout@v3

      - name: set up git lfs
        run: |
          git lfs install
          git lfs pull

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTASK=robert

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j8

      - name: run simulation
        env:
          PATH: $PATH:/usr/lib64/mpich/bin
        run: cd ${{github.workspace}}/build/bin && mpiexec -n 8 ./robert.release -i robert2d.inp

      - name: combile outputs
        run: cd ${{github.workspace}}/build/bin && ./combine.py -o test

      - name: compare result
        run: >
          python3 ${{github.workspace}}/examples/2019-Li-snap/test_robert.py
          ${{github.workspace}}/build/bin/robert-test-main.nc
          ${{github.workspace}}/examples/2019-Li-snap/robert_output.nc

  robert-3d:
    if: github.event.pull_request.draft == false
    runs-on: [self-hosted, Linux, 16core]
    needs: build-non-hydrostatic
    steps:
      - uses: actions/checkout@v3

      - name: set up git lfs
        run: |
          git lfs install
          git lfs pull

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTASK=robert3d

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j8

      - name: run simulation
        run: cd ${{github.workspace}}/build/bin && mpiexec -n 8 ./robert.release -i robert3d.inp

      - name: combile outputs
        run: cd ${{github.workspace}}/build/bin && ./combine.py -o test

      - name: compare result
        run: >
          python3 ${{github.workspace}}/examples/2019-Li-snap/test_robert.py
          ${{github.workspace}}/build/bin/robert-test-main.nc
          ${{github.workspace}}/examples/2019-Li-snap/robert3d_output.nc

  shallow-xy:
    if: github.event.pull_request.draft == false
    runs-on: [self-hosted, Linux, 4core]
    needs: build-non-hydrostatic
    steps:
      - uses: actions/checkout@v3

      - name: set up git lfs
        run: |
          git lfs install
          git lfs pull

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEOS=shallow_xy -DNETCDF=ON -DMPI=ON -DNUMBER_GHOST_CELLS=3

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j4

      - name: run simulation
        run: cd ${{github.workspace}}/build/bin && mpiexec -n 4 ./shallow_xy.release -i shallow_water.inp

      - name: combile outputs
        run: cd ${{github.workspace}}/build/bin && ./combine.py -o test

      - name: compare result
        run: >
          python3 ${{github.workspace}}/examples/2020-Li-polar-vortex/test_shallow.py
          ${{github.workspace}}/build/bin/sw-test-main.nc
          ${{github.workspace}}/examples/2020-Li-polar-vortex/swxy_output.nc
