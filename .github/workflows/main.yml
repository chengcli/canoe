name: Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ACCOUNT: chengcli

jobs:
  style-checker:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by ${{runner.name}}"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "üñ•Ô∏è The workspace, ${{ github.workspace }}, is now ready to test your code on the runner."

      - name: Install cpplint
        run: sudo pip install cpplint

      - uses: actions/checkout@v3

      - name: Run cpplint
        run: ./tools/check_style.sh

  build-non-hydrostatic:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker

    steps:
      - uses: actions/checkout@v3

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DRFM=OFF -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  build-hydrostatic:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker
    steps:
      - name: install netcdf4
        run: sudo apt-get install -y libnetcdf-dev

      - uses: actions/checkout@v3

      - name: install python modules
        run: sudo pip install -r requirements.txt

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DRFM=OFF -DHYDROSTATIC=ON -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build/tests
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

  generate-ktable-with-netcdf:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: style-checker

    steps:
      - name: install netcdf4
        run: sudo apt-get install -y libnetcdf-dev

      - uses: actions/checkout@v3

      - name: install python modules
        run: sudo pip install -r requirements.txt

      - name: create build directory
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DNETCDF=ON -DACCOUNT=${{env.ACCOUNT}} -DTOKEN=${{secrets.ACCESS_TOKEN}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/build-netcdf

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build-netcdf --config ${{env.BUILD_TYPE}}

      - name: test generating ktable
        working-directory: ${{github.workspace}}/build-netcdf
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: python ./bin/run_ktable.py

      - name: test jupiter heating/cooling
        working-directory: ${{github.workspace}}/build-netcdf
        run: echo "Cheers!"
