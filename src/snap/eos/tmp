
  auto pthermo = Thermodynamics::GetInstance();
  auto pmb = pmy_block_;

  apply_vapor_limiter(&cons, pmy_block_);

  Real gm1 = GetGamma() - 1.0;
  for (int k = kl; k <= ku; ++k)
    for (int j = jl; j <= ju; ++j) {
      for (int i = il; i <= iu; ++i) {
        Real& u_d = cons(IDN, k, j, i);
        Real& u_m1 = cons(IM1, k, j, i);
        Real& u_m2 = cons(IM2, k, j, i);
        Real& u_m3 = cons(IM3, k, j, i);
        Real& u_e = cons(IEN, k, j, i);

        Real& w_d = prim(IDN, k, j, i);
        Real& w_vx = prim(IVX, k, j, i);
        Real& w_vy = prim(IVY, k, j, i);
        Real& w_vz = prim(IVZ, k, j, i);
        Real& w_p = prim(IPR, k, j, i);

        Real density = 0.;
        for (int n = 0; n <= NVAPOR; ++n) density += cons(n, k, j, i);
        w_d = density;
        Real di = 1. / density;

        // mass mixing ratio
        for (int n = 1; n <= NVAPOR; ++n)
          prim(n, k, j, i) = cons(n, k, j, i) * di;

        // internal energy
        Real KE, fsig = 1., feps = 1.;
        // vapors
        for (int n = 1; n <= NVAPOR; ++n) {
          fsig += prim(n, k, j, i) * (pthermo->GetCvRatioMass(n) - 1.);
          feps += prim(n, k, j, i) * (pthermo->GetInvMuRatio(n) - 1.);
        }

#ifdef CUBED_SPHERE
        Real cos_theta =
            static_cast<GnomonicEquiangle*>(pco)->GetCosineCell(k, j);
#endif

        // Real di = 1.0/u_d;
        w_vx = u_m1 * di;
        w_vy = u_m2 * di;
        w_vz = u_m3 * di;

#ifdef CUBED_SPHERE
        cs::CovariantToContravariant(prim.at(k, j, i), cos_theta);
#endif

        // internal energy
        KE = 0.5 * (u_m1 * w_vx + u_m2 * w_vy + u_m3 * w_vz);
        w_p = gm1 * (u_e - KE) * feps / fsig;
      }

      fix_eos_cons2prim(pmb, prim, cons, k, j, il, iu);
      check_eos_cons2prim(prim, k, j, il, iu);
    }

  PrimitiveToConserved(prim, bcc, cons, pco, il, iu, jl, ju, kl, ku);
