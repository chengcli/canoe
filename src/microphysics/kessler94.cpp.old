// C/C++
#include <cmath>

// external
#include <application/application.hpp>

// canoe
#include <configure.hpp>

// snap
#include <snap/thermodynamics/thermodynamics.hpp>

// microphysics
//#include <snap/thermodynamics/vapors/water_vapors.hpp>

#include "microphysical_schemes.hpp"

Kessler94::Kessler94(std::string name, YAML::Node const &node)
    : MicrophysicalScheme<3>(name, node) {
  Application::Logger app("microphysics");
  app->Log("Initialize Kessler94 Scheme for " + name);
}

Kessler94::~Kessler94() {
  Application::Logger app("microphysics");
  app->Log("Destroy Kessler94 Scheme for " + GetName());
}

void Kessler94::AssembleReactionMatrix(AirParcel const &air, Real time) {
  auto pthermo = Thermodynamics::GetInstance();

  // get indices
  int iv = mySpeciesId(0);
  int ic = mySpeciesId(1);
  int ip = mySpeciesId(2);

  // get parameters
  Real k1 = GetPar<Real>("autoconversion");
  Real k2 = GetPar<Real>("accretion");
  Real k3 = GetPar<Real>("evaporation");

  // calculate saturation deficit (negative means sub-saturation)
  auto rates = pthermo->TryEquilibriumTP_VaporCloud(air, iv, 0., true);
  Real dqv = -rates[0];

  // assemble matrix
  rate_.setZero();
  jacb_.setZero();

  if (dqv < 0.) {  // evaporation
    rate_(0) += -k3 * air.w[ip] * dqv;
    rate_(2) += k3 * air.w[ip] * dqv;
    jacb_(0, 0) += -k3 * air.w[ip];
    jacb_(0, 2) += -k3 * dqv;
    jacb_(2, 0) += k3 * air.w[ip];
    jacb_(2, 2) += k3 * dqv;
  }

  // autoconversion
  rate_(1) += -k1 * air.w[ic];
  rate_(2) += k1 * air.w[ic];
  jacb_(1, 1) += -k1;
  jacb_(2, 1) += k1;

  // accretion
  rate_(1) += -k2 * air.w[ic] * air.w[ip];
  rate_(2) += k2 * air.w[ic] * air.w[ip];
  jacb_(1, 1) += -k2 * air.w[ip];
  jacb_(1, 2) += -k2 * air.w[ic];
  jacb_(2, 1) += k2 * air.w[ip];
  jacb_(2, 2) += k2 * air.w[ic];
}

void Kessler94::EvolveOneStep(AirParcel *air, Real time, Real dt) {
  auto pthermo = Thermodynamics::GetInstance();

  // auto sol = solver_.solveBDF1<Base::RealVector>(rate_, jacb_, dt);
  // auto sol = solver_.solveTRBDF2<Base::RealVector>(rate_, jacb_, dt);
  auto sol = solver_.solveTRBDF2Blend<Base::RealVector>(
      rate_, jacb_, dt, air->w, GetMySpeciesIndices().data());

  //! \todo check this
  // 0 is a special buffer place for cloud in equilibrium with vapor at the same
  // temperature
  int jbuf = pthermo->GetCloudIndex(mySpeciesId(0), 0);

  air->c[jbuf] += sol(0);
  for (int n = 1; n < Size; ++n) air->w[mySpeciesId(n)] += sol(n);

  // boiling condition xiz 2024
  //  get indices
  int iv = mySpeciesId(0);
  int ic = mySpeciesId(1);
  int ip = mySpeciesId(2);

  AirParcel airmole = *air;   // Copy the air object
  airmole.ToMoleFraction();   // Modify the copy
  Real tem = airmole.w[IDN];  // Extract the temperature or other property

  Real xs = pthermo->svp_func1_[iv][0](airmole, iv, 0) / airmole.w[IPR];
  if (xs > 1.) {  // boiling
    //     std::cout << "boiling: " <<pthermo->svp_func1_[iv][0](airmole, iv, 0)
    //     <<" P:"<< airmole.w[IPR] << std::endl;
    air->w[iv] += air->w[ip];
    air->w[ip] = 0.;
  }
}

void Kessler94::SetVsedFromConserved(AthenaArray<Real> vsed[3],
                                     Hydro const *phydro, int kl, int ku,
                                     int jl, int ju, int il, int iu) {
  // xiz added sedimentation velocity calculation 2024
  int ip = myCloudId(2);
  if (HasPar("sedimentation")) {
    Real vel = GetPar<Real>("sedimentation");
    for (int k = kl; k <= ku; ++k)
      for (int j = jl; j <= ju; ++j)
        for (int i = il; i <= iu; ++i) {
          vsed[0](ip, k, j, i) = vel;
        }
  } else {
    Real P, T, rho_gas, eta, lambda, Kn, beta;
    auto pthermo = Thermodynamics::GetInstance();
    Real Rd = pthermo->GetRd();
    const Real d = 2.827e-10;  // Molecular diameter in m
    const Real epsilon_LJ =
        59.7e-7;              // Depth of Lennard-Jones potential in J for H2
    const Real m = 3.34e-27;  // Molecular mass of H2
    Real r = GetPar<Real>("radius");       // Particle radius
    Real rho_d = GetPar<Real>("density");  // material density
    Real g = GetPar<Real>("gravity");
    for (int k = kl; k <= ku; ++k)
      for (int j = jl; j <= ju; ++j)
        for (int i = il; i <= iu; ++i) {
          rho_gas = phydro->w(IDN, k, j, i);
          P = phydro->w(IPR, k, j, i);
          T = P / (Rd * rho_gas);
          eta = (5.0 / 16.0) * std::sqrt(M_PI * m * Constants::kBoltz * T) *
                std::pow(Constants::kBoltz * T / epsilon_LJ, 0.16) /
                (M_PI * d * d * 1.22);
          // Calculate mean free path, lambda
          lambda =
              (eta * std::sqrt(M_PI * Constants::kBoltz * Constants::kBoltz)) /
              (P * std::sqrt(2.0 * m));
          // Calculate Knudsen number, Kn
          Kn = lambda / r;
          // Calculate Cunningham slip factor, beta
          beta = 1.0 + Kn * (1.256 + 0.4 * std::exp(-1.1 / Kn));
          // Calculate vsed
          Real vel = beta * (2.0 * r * r * g * (rho_d - rho_gas)) / (9.0 * eta);
          //          std::cout << "vel: " << vel << " pressure:" << P
          //                    << "rho_gas: " << rho_gas << " T:" << T <<
          //                    "beta: " << beta
          //                    << " eta:" << eta << " rho_gas: " << rho_gas
          //                    << " lambda:" << lambda << std::endl;
          if (vel > 5.e3) {
            vel = 5.e3;  // limit the sedimentation velocity to 5 km/s
          }
          vsed[0](ip, k, j, i) = vel;
        }
  }
}
