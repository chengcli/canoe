// C/C++
#include <iostream>
#include <memory>

// athena
#include <athena/parameter_input.hpp>
#include <athena/mesh/mesh.hpp>
#include <athena/outputs/outputs.hpp>
#include <athena/task_list/task_list.hpp>

// canoe
#include <configure.hpp>

// tasklist
#include <tasklist/extra_tasks.hpp>

// application
#include <application/command_line.hpp>
#include <application/signal.hpp>
#include <application/application.hpp>
#include <application/exceptions.hpp>

void mesh_setup(ParameterInput* &pin, Mesh* &mesh);
void mesh_destroy(ParameterInput* &pin, Mesh* &mesh, int mbcnt);

using OutputsPtr = std::unique_ptr<Outputs>;
using TaskListPtr = std::unique_ptr<@TASKLIST@>;

int main(int argc, char **argv)  {
  Application::Start(argc, argv);

  auto cli = CommandLine::GetInstance();
  auto sig = Signal::GetInstance();

  ParameterInput *pinput;
  Mesh *pmesh;

  mesh_setup(pinput, pmesh);

  // CONSTRUCT AND INITIALIZE TASKlIST
  TaskListPtr ptlist;
  try {
    ptlist = std::make_unique<@TASKLIST@>(pinput, pmesh);
  }
  catch(std::bad_alloc& ba) {
    throw RuntimeError("main", "TaskList memory allocation failed");
  }

  // CHANGE TO RUN DIRECTORY, INITIALIZE OUTPUTS OBJECT, AND MAKE OUTPUT OF ICs
  OutputsPtr pouts;
  try {
    //ChangeRunDir(cli->prundir);
    pouts = std::make_unique<Outputs>(pmesh, pinput);
    if (cli->res_flag == 0)
      pouts->MakeOutputs(pmesh, pinput);
  }
  catch(std::bad_alloc& ba) {
    throw RuntimeError("main", "Output memory allocation failed");
  }
  catch(std::exception const& ex) {
    throw RuntimeError("main", ex.what());
  }

  // START OF MAIN INTEGRATION LOOP
  // For performance, there is no error handler protecting this step (except outputs)

  if (Globals::my_rank == 0) {
    std::cout << "\nSetup complete, entering main loop...\n";
  }

  std::uint64_t mbcnt = 0;

  while ((pmesh->time < pmesh->tlim) &&
         (pmesh->nlim < 0 || pmesh->ncycle < pmesh->nlim)) {
    if (Globals::my_rank == 0)
      pmesh->OutputCycleDiagnostics();

    for (int stage=1; stage<=ptlist->nstages; ++stage) {
      ptlist->DoTaskListOneStage(pmesh, stage);
    }

    pmesh->UserWorkInLoop();

    pmesh->ncycle++;
    pmesh->time += pmesh->dt;
    mbcnt += pmesh->nbtotal;
    pmesh->step_since_lb++;

    pmesh->LoadBalancingAndAdaptiveMeshRefinement(pinput);

    pmesh->NewTimeStep();

    try {
      if (pmesh->time < pmesh->tlim) // skip the final output as it happens later
        pouts->MakeOutputs(pmesh,pinput);
    }
    catch(std::bad_alloc& ba) {
      throw RuntimeError("main", "MakeOutput memory allocation failed");
    }
    catch(std::exception const& ex) {
#ifdef MPI_PARALLEL
      MPI_Finalize();
#endif
      throw RuntimeError("main", ex.what());
    }

    // check for signals
    if (sig->CheckSignalFlags() != 0) {
      break;
    }
  }

  // END OF MAIN INTEGRATION LOOP
  // Make final outputs, print diagnostics, clean up and terminate

  // Output the final cycle diagnostics and make the final outputs
  if (Globals::my_rank == 0)
    pmesh->OutputCycleDiagnostics();

  pmesh->UserWorkAfterLoop(pinput);

  try {
    pouts->MakeOutputs(pmesh,pinput,true);
  }
  catch(std::bad_alloc& ba) {
    throw RuntimeError("main", "MakeOutput memory allocation failed");
  }
  catch(std::exception const& ex) {
#ifdef MPI_PARALLEL
    MPI_Finalize();
#endif
    throw RuntimeError("main", ex.what());
  }

  // Print diagnostic messages related to the end of the simulation
  mesh_destroy(pinput, pmesh, mbcnt);

#ifdef MPI_PARALLEL
  MPI_Finalize();
#endif

  Application::Destroy();
}
