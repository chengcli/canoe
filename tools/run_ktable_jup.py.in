#! /usr/bin/env python3
from pyathena import FileMode, io_wrapper, parameter_input
from pyharp import radiation, init_index_map
from multiprocessing import Pool, cpu_count
import os, re, subprocess, argparse

# prepare parse and add argument
parser = argparse.ArgumentParser()

parser.add_argument('-i', '--input')

args = vars(parser.parse_args())

cmake_source_dir = '@CMAKE_SOURCE_DIR@'
cmake_binary_dir = '@CMAKE_BINARY_DIR@'

# file architecture
hitbin  = f"{cmake_binary_dir}/bin/hitbin.release"
rfm     = f"{cmake_binary_dir}/bin/rfm.release"
run_rfm = f"{cmake_binary_dir}/bin/run_rfm.py"
kcoeff  = f"{cmake_binary_dir}/bin/kcoeff.release"
cktable = f"{cmake_binary_dir}/bin/cktable.py"

hitfile = f"{cmake_source_dir}/data/MidIR_HITRAN_0-2500_H2broaden_C2H2_C2H6_AIRbroaden.hit"
inpfile = args['input']

# number of threads
max_threads = cpu_count()//2

# ktable specifics
atm     = f"{cmake_source_dir}/data/new_jup_lat30_modelc.txt"
mol     = "CH4 C2H2 C2H4 C2H6"

# temperature grid
temp    = "-5 5 3"

# flags
generate_tab = True
generate_nc  = True
generate_cktable = True

# continuum absorption
cia     = "H2-H2-eq H2-He-eq"

# spectral bands
file = io_wrapper()
pin = parameter_input()

file.open(f"{inpfile}.inp", FileMode.read)
pin.load_from_file(file)
file.close()

init_index_map(pin)

rad = radiation()
rad.load_all_radiation_bands(pin)

bands_info = []
for i in range(rad.get_num_bands()):
    band = rad.get_band(i)
    name = band.get_name()
    wmin = band.get_wavenumber_min()
    wmax = band.get_wavenumber_max()
    wres = band.get_wavenumber_res()
    bands_info.append([name, wmin, wmax, wres])

# number of parallel threads
nthreads = min(max_threads, len(bands_info))

# run ktable in single thread
def RunSingleKtable(info):
  bname = info[0]
  print(f"working on band {bname} ...")
  wmin, wmax, dw = info[1], info[2], info[3]
  wave = f'{wmin} {wmax} {wres}'
  tab_folder = f'{wmin}-{wmax}'
  kinp = f'kcoeff.inp-{bname}'
  kncfile = f'kcoeff.{inpfile}-{bname}.nc'
  # create tab files and kcoeff.inp
  if generate_tab:
    script = ['python', run_rfm,'--hitbin',hitbin,'--rfm',rfm,'--hit',hitfile,
                      '--atm',atm,'--wave',wave,'--temp',temp,
                      '--molecule',mol,'--output',kinp,'--rundir',tab_folder]
    out, err = subprocess.Popen(script,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE).communicate()
    print(out.decode(), err.decode())
    #if not ('Successful' in out.decode()):
    #  raise RuntimeError("Error in generating tab files.")

  # run kcoeff
  if generate_nc:
    script = [kcoeff,'-i',kinp,'-o',kncfile]
    out, err = subprocess.Popen(script,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE).communicate()
    print(out.decode(), err.decode())
    #if err != b'':
    #    raise RuntimeError("Error in generating kcoeff.**.nc.")
  print("band %s finishes." % wave)

  # create correlated-K table
  if generate_cktable:
    script = [cktable,'--kcoeff',kncfile,'--atm',atm,'--cia',cia,
              '--input', kinp, '--output', f'{inpfile}-{bname}']
    out, err = subprocess.Popen(script,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE).communicate()
    print(out.decode(), err.decode())
  print("band %s finishes." % wave)

if __name__ == '__main__':
# parallel on spectral bands
    pool = Pool(nthreads)
    pool.map(RunSingleKtable, bands_info)
