#! python3
"""
Created on Jul 16 13:34:11 2017
@author: thl, cli
"""
from netCDF4 import *
from pylab import *
import argparse, glob

cmake_source_dir = '@CMAKE_SOURCE_DIR@'
cmake_binary_dir = '@CMAKE_BINARY_DIR@'

# prepare parse and add argument
parser = argparse.ArgumentParser()
parser.add_argument('--input',
  default = 'kcoeff.inp',
  help = 'input file'
  )
parser.add_argument('--kcoeff',
  help = 'netcdf file'
  )
parser.add_argument('--atm',
  help = 'atmosphere file'
  )
parser.add_argument('--bins',
  default = '0.95',
  )
parser.add_argument('--points',
  default = '8',
  )
parser.add_argument('--cia',
  default = '',
  help = 'cia absorber'
  )

# parse command-line inputs
args = vars(parser.parse_args())

Rgas = 8.3144621                # ideal gas constant    J/(K mol)
kBoltz = 1.3806504e-23          # Boltzman constant     J/K
Lo     = 2.68719e25             # Loschmidt number      mol/m^3 at STP

cia_dict = {
        "H2-H2-nm": f"{cmake_source_dir}/data/H2-H2-nm.xiz.txt"
        "H2-He-nm": f"{cmake_source_dir}/data/H2-H2-nm.xiz.txt"
        "H2-H2-eq": f"{cmake_source_dir}/data/H2-H2-nm.xiz.txt"
        "H2-He-eq": f"{cmake_source_dir}/data/H2-H2-nm.xiz.txt"
        }

def BinarySearch(array,t):
    low = 0
    height = len(array)-1
    while low+1<height:
        mid = (low+height)/2
        if array[mid] <=t:
            low = mid

        elif array[mid] >t:
            height = mid
    return low


def Math_GaussLegendre(n):
    p, w = np.polynomial.legendre.leggauss(n) # range is -1 to 1

    # now change it to 0 to 1

    return (p+1.)/2., w/2.

def load_data(ncfile, AbsorberNames):
    data = Dataset(ncfile, 'r')
    pres = data.variables['Pressure'][:]
    temp = data.variables['Temperature'][:]
    temp_grid = {}
    for gas in AbsorberNames:
        temp_grid[gas] = data.variables['T_' + gas][:]

    wn = data.variables['Wavenumber'][:]

    kcoeff = {}
    for gas in AbsorberNames:
        kcoeff[gas] = data.variables[gas][:, :, :]

    return pres, temp, wn, temp_grid, kcoeff


def load_mixr(atm_file):
    data = genfromtxt(atm_file, names = True)
    #pres = data[:,2]
    #temp = data[:,3]
    #return pres, temp


    return data

# read xiz cia txt file to get cia kcoeff

def load_xiz_cia(CIA_names,w1,w2,dw):
    kcoeff = {}
    t_grid = {}
    for cia in CIA_names:
       if cis in cia_dict.keys():
           inp = cia_dict[cia]
           print "--Load xiz cia data from ", inp
       else:
           raise ValueError("CIA name not found in cia_dict")

       data =genfromtxt(inp)

       t_grid[cia] = data[0,:][1:len(data[0,:])]

       M, N  = data.shape

       cia_wn = data[:,0][1:M]

       cia_kcoeff = data[1:M,1:N]

       len_wn = int((w2-w1)/dw) +1
       wn = np.zeros(len_wn)
       kcoeff[cia] = np.zeros((len_wn,len(t_grid[cia])))

       for i in range(len_wn):
           wn[i] = w1 + dw*i

           m = BinarySearch(cia_wn, wn[i])

           xm = wn[i] - cia_wn[m]
           xn = cia_wn[m+1] - wn[i]

           xm /= cia_wn[m+1] - cia_wn[m]
           xn /= cia_wn[m+1] - cia_wn[m]

           kcoeff[cia][i,:] = -(xn*cia_kcoeff[m,:] + xm*cia_kcoeff[m+1,:])

    return t_grid, kcoeff



def get_kcoeff1(p, n, T, temp, mixr, kcoeff):
   # p is the order in wn[]
   # n is the order in pres[]

   # find the loc of T in array temp[]
   m = BinarySearch(temp,T)

   xm = T-temp[m]
   xn = temp[m+1]-T


   xm /= temp[m+1]-temp[m]
   xn /= temp[m+1]-temp[m]

   lnkcoeff = xn*kcoeff[p,n,m] + xm*kcoeff[p,n,m+1]

   return 1e-5 * exp(lnkcoeff) * mixr * 1e-6    # 1e-6 for ppmv to mixing ratio


def get_kcoeff2(p,n,T,temp,mixr1, mixr2, kcoeff):
   # for CIA gas

   m = BinarySearch(temp,T)

   xm = T-temp[m]
   xn = temp[m+1]-T
   #print temp[m], T, temp[m+1]

   xm /= temp[m+1]-temp[m]
   xn /= temp[m+1]-temp[m]


   lnkcoeff = xn*kcoeff[p,m] + xm*kcoeff[p,m+1]
   #lnkcoeff = xn*kcoeff[m,p] + xm*kcoeff[m+1,p]

   return  exp(lnkcoeff) * mixr1 * mixr2 * 1e-12


def make_ck_axis(AbsorberNames,CIA_names, mixr, kcoeff_gas, kcoeff_cia, temp, temp_grid,temp_grid_cia,wn, g_p, g_n):
    #n = 110
    n = int(len(temp)/2)
    print "------- Make ck axis ------"
    print "Use level", n, "to sort"

    kc = np.zeros(len(wn))
    for gas in AbsorberNames:
        print "Add Absorber: ---", gas , " ---"
        dens = mixr['PRE'][len(temp)-n-1] *1e2/(Rgas*temp[n])               # 1e2 for mb to pa
        #print dens
        for p in range(len(wn)):
            kc[p] += get_kcoeff1(p,n, temp[n], temp[n] + temp_grid[gas]
                    ,mixr[gas][len(temp)-n-1],kcoeff_gas[gas]) *dens

            #print temp[n], mixr['TEM'][len(temp)-n-1]

    for cia in CIA_names:
        print "Add CIA: ---", cia , " ---"
        cia_gas = cia.split('-')
        #print cia_gas[0], cia_gas[1]

        amagat = mixr['PRE'][len(temp)-n-1]*1e2/(kBoltz * Lo * temp[n])
       # print amagat

        for p in range(len(wn)):
            kc[p] += get_kcoeff2(p, n, temp[n], temp_grid_cia[cia],
                    mixr[cia_gas[0]][len(temp)-n-1], mixr[cia_gas[1]][len(temp)-n-1], kcoeff_cia[cia]) *amagat * amagat

    # save the wavenumber array after sorting
    #print kc[822], kc[823]

    sort_wn = np.zeros(len(wn))
    for i in range(len(wn)):
        sort_wn[i] = wn[argsort(kc)[i]]
        #sort_wn[argsort(kc)[i]] = wn[i]


    #for i in range(len(kc)):
    #    if kc[i] == min(kc):
    #        print i

    #for i in range(len(sort_wn)):
    #    print i , " ", sort_wn[i]

    print "------- Sort done ------"

    print ""
    print ""
    print "---- Choose", g_n, "Gaussian points--"
    g = np.zeros(2*g_n)
    gg, _ = Math_GaussLegendre(g_n)

    g[0:g_n] = g_p * gg
    g[g_n:2*g_n] = g_p + (1-g_p) *gg


    g_wn = np.zeros(2*g_n)

    for i in range(2*g_n):
        order = int(g[i] *len(wn))


        g_wn[i]  = sort_wn[order]
        #print g_wn[i]

    #print g_wn

    print ""
    print ""
    print "------- ck axis done ------"


    return sort_wn,  g_wn, g

def write_ck_table(AbsorberNames,CIA_names, temp, temp_grid, temp_grid_cia, pres,
  kcoeff_gas, kcoeff_cia,wn, sort_wn, g_wn,g,outfile):
    print ""
    print "------ Create cktable file ------"
    min_wn = wn[0]
    max_wn = wn[-1]
    d_wn = wn[1] - wn[0]

    ncfile = Dataset(outfile, 'w')

    # dimension variable
    ncfile.createDimension('sort_wn', len(sort_wn))
    dim = ncfile.createVariable('sort_wn', 'f8', ('sort_wn',))
    dim[:] = sort_wn
    dim.long_name = 'sort_wavenumber'
    dim.units      = 'cm-1'

    ncfile.createDimension('g_wn', len(g_wn))
    dim = ncfile.createVariable('g_wn', 'f8', ('g_wn',))
    dim[:] = g_wn
    dim.long_name = 'gaussian wavenumber'
    dim.units = 'cm-1'

    ncfile.createDimension('Wavenumber', len(g))
    dim = ncfile.createVariable('Wavenumber', 'f8', ('Wavenumber',))
    dim[:] = g
    dim.long_name = 'ck g value'
    dim.units = ''

    ncfile.createDimension('Pressure', len(pres))
    dim = ncfile.createVariable('Pressure', 'f8', ('Pressure',))
    dim[:] = pres
    dim.long_name   = 'Pressure'
    dim.units       = 'mb'

    ncfile.createDimension('Temperature', len(temp))
    dim = ncfile.createVariable('Temperature', 'f8', ('Temperature',))
    dim[:] = temp
    dim.long_name   = 'Temperature'
    dim.units       = 'K'

    if len(AbsorberNames) != 0:

      for gas in AbsorberNames:
          ncfile.createDimension('T_'+gas, len(temp_grid[gas]))
          dim = ncfile.createVariable('T_'+gas, 'f8', ('T_'+gas,))
          dim[:] = temp_grid[gas]
          dim.long_name = 'Relative Temperature'
          dim.units = 'K'

          dim_k_name = ('Wavenumber','Pressure','T_'+gas)
          dim_k = (len(g), len(pres),len(temp_grid))

          var = ncfile.createVariable(gas, 'f8', dim_k_name)
          for i in range(len(g)):
              order = (g_wn[i]-min_wn)/d_wn
              order = int(order)
              #print order, wn[order]

              var[i,:,:] = kcoeff_gas[gas][order,:,:]
          var.long_name = gas+ ' absorption coefficients'
          var.units = 'ln(m^2/kmol)'

    if len(CIA_names) != 0:
       for cia in CIA_names:
           ncfile.createDimension('T_'+cia, len(temp_grid_cia[cia]))
           dim = ncfile.createVariable('T_'+cia, 'f8', ('T_'+cia,))
           dim[:] = temp_grid_cia[cia]
           dim.long_name = 'CIA temperature grid'
           dim.units = 'K'

           #dim_k_name = ('T_'+cia,'Wavenumber')
           #dim_k = (len(temp_grid[cia]),len(g))
           dim_k_name = ('Wavenumber','T_'+cia)
           dim_k = (len(g),len(temp_grid_cia[cia]))

           var = ncfile.createVariable(cia, 'f8', dim_k_name)
           for i in range(len(g)):
              order = (g_wn[i] - min_wn)/d_wn
              order = int(order)

              var[i,:] = kcoeff_cia[cia][order,:]
              #var[i,:] = -kcoeff[cia][:,order]

           var.long_name = cia+' absorption coefficients'
           var.units = 'ln(cm Amagat^2)'

    ncfile.close()
    print "------ Done  -----"


if __name__ == '__main__':
  cias  = args['cia'].split()
  bins  = float(args['bins'])
  points= int(args['points'])

  with open(args['input'], 'r') as file:
    a = file.readlines()

  for i in range(len(a)):
    if a[i] == '# Molecular absorber\n':
      AbsorberNames= a[i+2].split()
    elif a[i] == '# Wavenumber range\n':
      b = a[i+1].strip('\n')
      b = b.split()
      min_wn = double(b[0])
      max_wn = double(b[1])
      n_wn   = int(b[2])
      dw     = (max_wn-min_wn)/(n_wn-1)
      outfile = "cktable." + b[0] +'-' + b[1] + '.nc'

  a,b,c,d,e = load_data(args['kcoeff'],AbsorberNames)
  mixr = load_mixr(args['atm'])
  tg, cia_k  = load_xiz_cia(cias, min_wn,max_wn,dw)
  ff, gg, hh= make_ck_axis(AbsorberNames,cias, mixr,e, cia_k, b, d, tg,c, bins, points)
  write_ck_table(AbsorberNames,cias, b, d, tg, a, e, cia_k, c, ff, gg, hh, outfile)
